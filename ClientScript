#include "SimpleEspNowConnection.h"

SimpleEspNowConnection simpleEspConnection(SimpleEspNowRole::CLIENT);

String inputString;
String serverAddress;

typedef struct struct_message {
  char type;
  char a[32];
  int b;
  float c;
  bool e;
} struct_message;

bool sendBigMessage()
{
  char bigMessage[] = "\n\Hi my name is ESP 32. I've been issued by a student named Akshanu Sachdeva who has programmed me to send big message to my client ESP32 boards.\n\
Hopefully if I'm displaying this message then I've already paired with my client and would like it know that Coventry is a beautiful place to live even for non living things like us.\n\
\"Goodness me!\" transport mueseum, \"that would be just the very thing for me if I only had the chance to visit! But unfortunately I can't! or maybe?\"\n\
My friend Akshanu could take me there, as he himself is a big automotive enthusaist and simply adores transport museum.\n\
Coventry Transport Museum is home to one of the largest collections of British road transport in the world a collection of Designated national importance, consisting of 300 cycles, 120 motorcycles and 250 cars and commercial vehicles, and over a million archive and ephemera items.\n\
The Arts Council's Designation scheme identifies the pre-eminent collections of national and international importance, held in England's none-national museums, libraries and archives, based on their quality and significance.\n\
These inspiring collections represent a vital part of our national cultural and artistic heritage.\n\
Although we are well-known as a motor museum, we have a significant collection of cycles which ranges from the earliest boneshakers and Penny Farthings to the latest safety cycles,tracing the history of Coventryâ€™s significant contribution to the cycle industry from the early Victorian period to the modern times.\n\"\n\
\0";   
 return(simpleEspConnection.sendMessage(bigMessage));  
}

bool sendStructMessage()
{
  struct_message myData;
  
  myData.type = '#'; // just to mark first byte. It's on you how to distinguish between struct and text message
  sprintf (myData.a, "Greetings from %s", simpleEspConnection.myAddress.c_str());
  myData.b = random(1,20);
  myData.c = (float)random(1,100000)/(float)10000;
  myData.e = true;
    
  return(simpleEspConnection.sendMessage((uint8_t *)&myData, sizeof(myData)));
}

void OnSendError(uint8_t* ad)
{
  Serial.println("SENDING TO '"+simpleEspConnection.macToStr(ad)+"' WAS NOT POSSIBLE!");
}

void OnMessage(uint8_t* ad, const uint8_t* message, size_t len)
{
  if((char)message[0] == '#') // however you distinguish....
  {
    struct_message myData;
    
    memcpy(&myData, message, len);
    Serial.printf("Structure:\n");    
    Serial.printf("a:%s\n", myData.a, "%.2 %.2f %d \n");    
    Serial.printf("b:%d\n", myData.b, "%.2 %.2f %d \n");    
    Serial.printf("c:%f\n", myData.c, "%.2 %.2f %d \n");    
    Serial.printf("e:%s\n", myData.e ? "true" : "false");    
  }
  else
    Serial.printf("MESSAGE:[%d]%s from %s\n", len, (char *)message, simpleEspConnection.macToStr(ad).c_str());
}

void OnNewGatewayAddress(uint8_t *ga, String ad)
{  
  Serial.println("New GatewayAddress '"+ad+"'");
  serverAddress = ad;

  simpleEspConnection.setServerMac(ga);
}

void setup() 
{
  Serial.begin(115200);
  Serial.println();

  Serial.println("Setup...");

  simpleEspConnection.begin();
  simpleEspConnection.setPairingBlinkPort(2);  

   serverAddress = "4C11AECD32E0"; // Test if you know the server
   simpleEspConnection.setServerMac(serverAddress);
  simpleEspConnection.onNewGatewayAddress(&OnNewGatewayAddress);    
  simpleEspConnection.onSendError(&OnSendError);  
  simpleEspConnection.onMessage(&OnMessage);  
  
  Serial.println(WiFi.macAddress());  
}

void loop() 
{
  // needed to manage the communication in the background!  
  simpleEspConnection.loop();
  
  while (Serial.available()) 
  {
    char inChar = (char)Serial.read();
    if (inChar == '\n') 
    {
        Serial.println(inputString);
        
      if(inputString == "startpair")
      {
        simpleEspConnection.startPairing(30);
      }
      else if(inputString == "endpair")
      {
        simpleEspConnection.endPairing();
      }      
      else if(inputString == "changepairingmac")
      {
        uint8_t np[] {0xCE, 0x50, 0xE3, 0x15, 0xB7, 0x33}; //Client ADDRESS
        
        simpleEspConnection.setPairingMac(np);
      }      
      else if(inputString == "textsend")
      {
        if(!simpleEspConnection.sendMessage("This comes from the Client"))
        {
          Serial.println("SENDING TO '"+serverAddress+"' WAS NOT POSSIBLE!");
        }
      }
      else if(inputString == "structsend")
      {
        if(!sendStructMessage())
        {
          Serial.println("SENDING TO '"+serverAddress+"' WAS NOT POSSIBLE!");
        }
      }
      else if(inputString == "bigsend")
      {
        if(!sendBigMessage())
        {
          Serial.println("SENDING TO '"+serverAddress+"' WAS NOT POSSIBLE!");
        }
      }
      
      inputString = "";
    }
    else
    {
      inputString += inChar;
    }
  }
}
